@model DariTn.Models.Entities.AssetAdv

@{
    ViewBag.Title = "Edit";
}

<h2>Edit advertisement</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
<div class="form-horizontal">
    <h4>Edit advertisement</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.id)


    <div class="form-group">
        <p class="control-label col-md-2">Description</p>
        <div class="col-md-10">
            @Html.EditorFor(model => model.description, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.description, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <p class="control-label col-md-2">Type</p>
        <div class="col-md-10">
            @Html.EditorFor(model => model.type, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.type, "", new { @class = "text-danger" })
        </div>
    </div>


    <div class="form-group">
        <p class="control-label col-md-2">Price</p>
        <div class="col-md-10">
            @Html.EditorFor(model => model.price, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.price, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <p class="control-label col-md-2">Surface</p>
        <div class="col-md-10">
            @Html.EditorFor(model => model.surface, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.surface, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <p class="control-label col-md-2">Street</p>
        <div class="col-md-10">
            @Html.EditorFor(model => model.street, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.street, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <p class="control-label col-md-2">City</p>
        <div class="col-md-10">
            @Html.EditorFor(model => model.city, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.city, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <p class="control-label col-md-2">State</p>
        <div class="col-md-10">
            @Html.EditorFor(model => model.state, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.state, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <p class="control-label col-md-2">Postal Code</p>
        <div class="col-md-10">
            @Html.EditorFor(model => model.postalCode, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.postalCode, "", new { @class = "text-danger" })
        </div>
    </div>
    @if ((Model.category.Equals("Apartment")) || (Model.category.Equals("Office")) || (Model.category.Equals("House")))
    {
        <div class="form-group">
            <p class="control-label col-md-2">Number of Rooms</p>
            <div class="col-md-10">
                @Html.EditorFor(model => model.nbrRooms, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.nbrRooms, "", new { @class = "text-danger" })
            </div>
        </div>
    }


    @if ((Model.category.Equals("Apartment")) || (Model.category.Equals("Office")) || (Model.category.Equals("House")))
    {
        <div class="form-group">
            <p class="control-label col-md-2">Number of Floors</p>
            <div class="col-md-10">
                @Html.EditorFor(model => model.nbrFloor, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.nbrFloor, "", new { @class = "text-danger" })
            </div>
        </div>
    }
    @if ((Model.category.Equals("Apartment")) || (Model.category.Equals("Office")))
    {
        <div class="form-group">
            <p class="control-label col-md-2">Situated in Floor</p>
            <div class="col-md-10">
                @Html.EditorFor(model => model.floor, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.floor, "", new { @class = "text-danger" })
            </div>
        </div>
    }
    @if ((Model.category.Equals("Apartment")) || (Model.category.Equals("Office")) || (Model.category.Equals("House")))
    {
        <div class="form-group">
            <p class="control-label col-md-2">Number of Bathrooms</p>
            <div class="col-md-10">
                @Html.EditorFor(model => model.nbrBathrooms, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.nbrBathrooms, "", new { @class = "text-danger" })
            </div>
        </div>
    }
    @if ((Model.category.Equals("Apartment")) || (Model.category.Equals("Office")) || (Model.category.Equals("House")))
    {
        <div class="form-group">
            <p class="control-label col-md-2">Furnished</p>
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.furnished)
                    @Html.ValidationMessageFor(model => model.furnished, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
    }
    @if (Model.category.Equals("House"))
    {
        <div class="form-group">
            <p class="control-label col-md-2">Garage</p>
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.garage)
                    @Html.ValidationMessageFor(model => model.garage, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
    }
    @if ((Model.category.Equals("Apartment")) || (Model.category.Equals("Office")))
    {
        <div class="form-group">
            <p class="control-label col-md-2">Parking</p>
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.parking)
                    @Html.ValidationMessageFor(model => model.parking, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
    }
    @if (Model.category.Equals("House"))
    {
        <div class="form-group">
            <p class="control-label col-md-2">Pool</p>
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.pool)
                    @Html.ValidationMessageFor(model => model.pool, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
    }

    @if ((Model.category.Equals("Apartment")) || (Model.category.Equals("Office")) || (Model.category.Equals("House")))
    {
        <div class="form-group">
            <p class="control-label col-md-2">Capacity</p>
            <div class="col-md-10">
                @Html.EditorFor(model => model.capacity, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.capacity, "", new { @class = "text-danger" })
            </div>
        </div>
    }
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
